// SPDX-FileCopyrightText: 2023 Devin Lin <devin@kde.org>
// SPDX-License-Identifier: GPL-3.0-or-later

#include "thread.h"
#include "constants.h"

Thread::Thread(QObject *parent, QString messageId, QString accountId, QString subject, QString gmailThreadId)
    : QObject{parent}
    , m_id{} // TODO autogenerated????
    , m_messageId{messageId}
    , m_accountId{accountId}
    , m_gmailThreadId{gmailThreadId}
    , m_subject{subject}
    , m_unread{0}
{
}

Thread::Thread(QObject *parent, const QSqlQuery &query)
    : QObject{parent}
{
}

void Thread::saveToDb(QSqlDatabase &db) const
{

}

void Thread::deleteFromDb(QSqlDatabase &db) const
{
    QSqlQuery query{db};
    query.prepare(QStringLiteral("DELETE FROM ") + THREAD_TABLE + QStringLiteral(" WHERE id = ") + m_id);
    query.exec();
}

QString Thread::messageId() const
{
    return m_messageId;
}

void Thread::setMessageId(const QString &messageId)
{
    m_messageId = messageId;
}

QString Thread::accountId() const
{
    return m_accountId;
}

void Thread::setAccountId(const QString &accountId)
{
    m_accountId = accountId;
}

QString Thread::gmailThreadId() const
{
    return m_gmailThreadId;
}

void Thread::setGmailThreadId(const QString &gmailThreadId)
{
    m_gmailThreadId = gmailThreadId;
}

QString Thread::subject() const
{
    return m_subject;
}

void Thread::setSubject(const QString &subject)
{
    m_subject = subject;
}

int Thread::unread()
{
    return m_unread;
}

void Thread::setUnread(int unread)
{
    m_unread = unread;
}
